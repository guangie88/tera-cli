# The way this works is a little weird. But basically, the set-release-vars job
# runs purely to initialize the GitHub release itself. Once done, the upload
# URL of the release is saved as an artifact.
#
# The build-release job runs only once set-release-vars is finished. It gets
# the release upload URL by downloading the corresponding artifact (which was
# uploaded by set-release-vars). It then builds the release executables for each
# supported platform and attaches them as release assets to the previously
# created release.
#
# The key here is that we create the release only once.

name: release
on:
  release:   # For testing, do a release on v0.0.0 (then delete it)
    types:
    - created

jobs:
  set-release-vars:
    name: set-release-vars
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.get_release.outputs.upload_url }}
      tag_version: ${{ env.TAG_VERSION }}
    steps:
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.TAG_VERSION == ''
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV
          echo "version is: ${TAG_VERSION}"

      - name: Save version number to artifact
        run: echo "${{ env.TAG_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['set-release-vars']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
        - pinned
        - stable
        - beta
        - nightly
        - nightly-musl
        - nightly-32
        - nightly-mips
        - nightly-arm
        - macos
        - win-msvc
        - win-gnu
        include:
        - build: pinned
          os: ubuntu-22.04
          rust: 1.65.0
        - build: stable
          os: ubuntu-22.04
          rust: stable
        - build: beta
          os: ubuntu-22.04
          rust: beta
        - build: nightly
          os: ubuntu-22.04
          rust: nightly
        - build: nightly-musl
          os: ubuntu-22.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: nightly-32
          os: ubuntu-22.04
          rust: nightly
          target: i686-unknown-linux-gnu
        - build: nightly-mips
          os: ubuntu-22.04
          rust: nightly
          target: mips64-unknown-linux-gnuabi64
        - build: nightly-arm
          os: ubuntu-22.04
          rust: nightly
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-12
          rust: nightly
        - build: win-msvc
          os: windows-2022
          rust: nightly
        - build: win-gnu
          os: windows-2022
          rust: nightly-x86_64-gnu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        ci/ubuntu-install-packages

    - name: Install packages (macOS)
      if: matrix.os == 'macos-12'
      run: |
        ci/macos-install-packages

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Use Cross
      if: matrix.target != ''
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"

    - name: Build executable
      run: ${{ env.CARGO }} build --verbose --workspace --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/tera"

    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/tera

    - name: Build archive
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
        staging="tera-cli-${{ needs.set-release-vars.outputs.tag_version }}-${{ matrix.target }}"

        mkdir -p "$staging"
        cp LICENSE "$staging/"

        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          cp "target/${{ matrix.target }}/release/tera.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          # The man page is only generated on Unix systems. ¯\_(ツ)_/¯
          cp "target/${{ matrix.target }}/release/tera" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.set-release-vars.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

  cargo-publish:
    name: cargo publish
    needs: ['set-release-vars']
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Get release download URL
      uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: artifacts
    - name: Retrieve release version and remove dirty artifacts
      shell: bash
      run: |
        TAG_VERSION="$(cat artifacts/release-version)"
        echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV
        echo "release version: ${TAG_VERSION}"
        rm -rf artifacts/
    - name: Publish to crates.io
      if: env.TAG_VERSION != 'v0.0.0'
      run: |
        cargo login ${{ secrets.CRATES_IO_TOKEN }}
        cargo publish
